// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(SUPPLIER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  supplier  Supplier?
  audits    Audit[]

  @@map("users")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactInfo String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId       String?     @unique
  user         User?       @relation(fields: [userId], references: [id])
  products     Product[]
  purchaseOrders PurchaseOrder[]

  @@map("suppliers")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  stockItems StockItem[]
  purchaseOrderLines PurchaseOrderLine[]

  @@map("products")
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  location  String
  capacity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stockItems StockItem[]

  @@map("warehouses")
}

model StockItem {
  id             String   @id @default(cuid())
  quantity       Int
  reorderLevel   Int      @default(10)
  maxStockLevel  Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  movements   StockMovement[]

  @@unique([productId, warehouseId])
  @@map("stock_items")
}

model StockMovement {
  id          String      @id @default(cuid())
  type        MovementType
  quantity    Int
  reason      String?
  referenceId String?
  createdAt   DateTime    @default(now())

  // Relations
  stockItemId String
  stockItem   StockItem @relation(fields: [stockItemId], references: [id])

  @@map("stock_movements")
}

model PurchaseOrder {
  id          String              @id @default(cuid())
  orderNumber String              @unique
  status      PurchaseOrderStatus @default(PENDING)
  totalAmount Decimal             @db.Decimal(10, 2)
  orderDate   DateTime            @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])
  lines      PurchaseOrderLine[]

  @@map("purchase_orders")
}

model PurchaseOrderLine {
  id              String   @id @default(cuid())
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  receivedQuantity Int     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])

  @@map("purchase_order_lines")
}

model Audit {
  id        String   @id @default(cuid())
  action    String
  table     String
  recordId  String
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audits")
}

enum Role {
  ADMIN
  SUPPLIER
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum PurchaseOrderStatus {
  PENDING
  APPROVED
  ORDERED
  RECEIVED
  CANCELLED
}